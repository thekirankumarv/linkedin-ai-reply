import { resolveConfig } from "./utils/building/index.mjs";
import { createHooks } from "hookable";
import { createWxtPackageManager } from "./package-managers/index.mjs";
import { createViteBuilder } from "./builders/vite/index.mjs";
import { builtinModules } from "../builtin-modules/index.mjs";
export let wxt;
export async function registerWxt(command, inlineConfig = {}, getServer) {
  process.env.NODE_ENV ??= command === "serve" ? "development" : "production";
  const hooks = createHooks();
  const config = await resolveConfig(inlineConfig, command);
  const server = await getServer?.(config);
  const builder = await createViteBuilder(config, hooks, server);
  const pm = await createWxtPackageManager(config.root);
  wxt = {
    config,
    hooks,
    hook: hooks.hook.bind(hooks),
    get logger() {
      return config.logger;
    },
    async reloadConfig() {
      wxt.config = await resolveConfig(inlineConfig, command);
    },
    pm,
    builder,
    server
  };
  const initModule = async (module) => {
    if (module.hooks) wxt.hooks.addHooks(module.hooks);
    await module.setup?.(
      wxt,
      // @ts-expect-error: Untyped configKey field
      module.configKey ? config[module.configKey] : void 0
    );
  };
  for (const builtinModule of builtinModules) await initModule(builtinModule);
  for (const userModule of config.userModules) await initModule(userModule);
  wxt.hooks.addHooks(config.hooks);
  await wxt.hooks.callHook("ready", wxt);
}
export function setWxtForTesting(testInstance) {
  wxt = testInstance;
}
